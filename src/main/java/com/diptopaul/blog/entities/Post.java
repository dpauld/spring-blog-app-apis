package com.diptopaul.blog.entities;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@NoArgsConstructor
@Getter
@Setter
@Entity
@Table(name="post")
public class Post {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;
	
	@Column(name="title", length=150, nullable = false)
	private String title;
	
	@Column(length = 10000)
	private String content;
	
	private String imageName;
	
	private Date addedDate;
	
	@ManyToOne
	@JoinColumn(name="category_id")//JoinColumn is optional, if the name of the field variable and field name of the db name is same. Here we used the same name but we can name it differently.
	//If the db table is not created already, the foreign key field and its referenced value is mainly generated by the @ManyToOne relationship.
	//If you created the db at first and you don't want to name the private variable name same as the db table field name then you need to use @JoinColumn to specify the table name provided in the mysql db and refer the foreign key
	private Category category;
	
	@ManyToOne
	//we decided not to use @JoinColumn here, cause 
	private User user;
	
	@OneToMany(mappedBy = "post", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	private List<Comment> comments=new ArrayList<>();////instead of null, creating arrayList will create an Empty array as []
	//use set if you don't want to have sorting or specific order
	//private Set<Comment> comments;
	
}

